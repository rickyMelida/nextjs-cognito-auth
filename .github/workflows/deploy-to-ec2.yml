name: Deploy to EC2

on:
  workflow_run:
    workflows: ["Build and Push to ECR"]
    types:
      - completed
    branches:
      - master

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: foler/crystal-manager-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Solo ejecutar si el workflow anterior fue exitoso
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Variables
            AWS_REGION="${{ env.AWS_REGION }}"
            ECR_REPOSITORY="${{ env.ECR_REPOSITORY }}"
            IMAGE_TAG="${{ github.event.workflow_run.head_sha }}"
            CONTAINER_NAME="nextjs-cognito-app"
            
            # Obtener Account ID automáticamente
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
            
            echo "🚀 Desplegando imagen: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            
            # Autenticarse con ECR
            echo "🔐 Autenticando con ECR..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Detener y eliminar contenedor existente si existe
            echo "🛑 Deteniendo contenedor existente..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            
            # Descargar la imagen más reciente
            echo "📥 Descargando imagen..."
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # Ejecutar el nuevo contenedor
            echo "🏃 Iniciando nuevo contenedor..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # Esperar unos segundos para que el contenedor inicie
            echo "⏳ Esperando que el contenedor inicie..."
            sleep 10
            
            # Verificar que el contenedor está ejecutándose y saludable
            echo "✅ Verificando estado del contenedor..."
            if docker ps | grep $CONTAINER_NAME; then
              echo "✅ Contenedor iniciado correctamente"
              
              # Health check opcional
              echo "🔍 Verificando health check..."
              if curl -f http://localhost:3000 >/dev/null 2>&1; then
                echo "✅ Aplicación responde correctamente"
              else
                echo "⚠️  Aplicación no responde en el puerto 3000"
              fi
            else
              echo "❌ Error: El contenedor no está ejecutándose"
              echo "📋 Logs del contenedor:"
              docker logs $CONTAINER_NAME --tail 50
              exit 1
            fi
            
            # Limpiar imágenes antiguas (conservar últimas 3)
            echo "🧹 Limpiando imágenes antiguas..."
            docker images $ECR_REGISTRY/$ECR_REPOSITORY --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +2 | head -n -3 | awk '{print $1}' | xargs -r docker rmi || true
            
            echo "🎉 Despliegue completado exitosamente!"
            echo "🌐 Aplicación disponible en: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):3000"
